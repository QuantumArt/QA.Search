// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QA.Search.Data;

#nullable disable

namespace QA.Search.Data.Migrations.AdminSearchDb
{
    [DbContext(typeof(AdminSearchDbContext))]
    [Migration("20221123132614_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("admin")
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QA.Search.Data.Models.ReindexTask", b =>
                {
                    b.Property<string>("SourceIndex")
                        .HasColumnType("text")
                        .HasColumnName("source_index");

                    b.Property<string>("DestinationIndex")
                        .HasColumnType("text")
                        .HasColumnName("destination_index");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("ElasticTaskId")
                        .HasColumnType("text")
                        .HasColumnName("elastic_task_id");

                    b.Property<DateTime?>("Finished")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("ShortIndexName")
                        .HasColumnType("text")
                        .HasColumnName("short_index_name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<long>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.HasKey("SourceIndex", "DestinationIndex")
                        .HasName("pk_reindex_tasks");

                    b.ToTable("reindex_tasks", "admin");
                });

            modelBuilder.Entity("QA.Search.Data.Models.ResetPasswordRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reset_password_requests");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reset_password_requests_user_id");

                    b.ToTable("reset_password_requests", "admin");
                });

            modelBuilder.Entity("QA.Search.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("bytea")
                        .HasColumnName("salt");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", "admin");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin.search@quantumart.ru",
                            PasswordHash = new byte[] { 94, 18, 53, 150, 210, 136, 179, 209, 156, 30, 64, 198, 133, 83, 109, 69, 84, 200, 79, 235, 26, 62, 142, 19, 160, 248, 86, 37, 32, 195, 97, 14 },
                            Role = 1,
                            Salt = new byte[] { 106, 117, 27, 162, 96, 145, 73, 17, 61, 117, 244, 203, 233, 110, 138, 112 }
                        });
                });

            modelBuilder.Entity("QA.Search.Data.Models.ResetPasswordRequest", b =>
                {
                    b.HasOne("QA.Search.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reset_password_requests_users_user_id");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
