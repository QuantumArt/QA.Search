// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QA.Search.Data;

#nullable disable

namespace QA.Search.Data.Migrations.CrawlerSearchDb
{
    [DbContext(typeof(CrawlerSearchDbContext))]
    partial class CrawlerSearchDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("crawler")
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QA.Search.Data.Models.Domain", b =>
                {
                    b.Property<string>("Origin")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasColumnName("origin");

                    b.Property<int>("DomainGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("domain_group_id");

                    b.Property<DateTime?>("LastDeepCrawlingUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_deep_crawling_utc");

                    b.Property<DateTime?>("LastFastCrawlingUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_fast_crawling_utc");

                    b.HasKey("Origin")
                        .HasName("pk_domains");

                    b.HasIndex("DomainGroupId")
                        .HasDatabaseName("ix_domains_domain_group_id");

                    b.ToTable("domains", "crawler");
                });

            modelBuilder.Entity("QA.Search.Data.Models.DomainGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IndexingConfig")
                        .HasColumnType("text")
                        .HasColumnName("indexing_config");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_domain_groups");

                    b.ToTable("domain_groups", "crawler");
                });

            modelBuilder.Entity("QA.Search.Data.Models.Link", b =>
                {
                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("NextIndexingUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_indexing_utc");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<long>("Version")
                        .HasColumnType("bigint")
                        .HasColumnName("version");

                    b.HasKey("Hash")
                        .HasName("pk_links");

                    b.HasIndex("NextIndexingUtc")
                        .HasDatabaseName("ix_links_next_indexing_utc");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("NextIndexingUtc"), new[] { "Url", "Version", "IsActive" });

                    b.ToTable("links", "crawler");
                });

            modelBuilder.Entity("QA.Search.Data.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DomainGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("domain_group_id");

                    b.Property<string>("IndexingConfig")
                        .HasColumnType("text")
                        .HasColumnName("indexing_config");

                    b.Property<string>("RouteText")
                        .HasColumnType("text")
                        .HasColumnName("route");

                    b.Property<int>("ScanPeriodMsec")
                        .HasColumnType("integer")
                        .HasColumnName("scan_period_msec");

                    b.HasKey("Id")
                        .HasName("pk_routes");

                    b.HasIndex("DomainGroupId")
                        .HasDatabaseName("ix_routes_domain_group_id");

                    b.ToTable("routes", "crawler");
                });

            modelBuilder.Entity("QA.Search.Data.Models.Domain", b =>
                {
                    b.HasOne("QA.Search.Data.Models.DomainGroup", "DomainGroup")
                        .WithMany("Domains")
                        .HasForeignKey("DomainGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_domains_domain_groups_domain_group_id");

                    b.Navigation("DomainGroup");
                });

            modelBuilder.Entity("QA.Search.Data.Models.Route", b =>
                {
                    b.HasOne("QA.Search.Data.Models.DomainGroup", "DomainGroup")
                        .WithMany("Routes")
                        .HasForeignKey("DomainGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_routes_domain_groups_domain_group_id");

                    b.Navigation("DomainGroup");
                });

            modelBuilder.Entity("QA.Search.Data.Models.DomainGroup", b =>
                {
                    b.Navigation("Domains");

                    b.Navigation("Routes");
                });
#pragma warning restore 612, 618
        }
    }
}
